=== COMPREHENSIVE C++ CONTAINER OPERATIONS DEMO ===

=== SEQUENTIAL CONTAINERS ===

--- VECTOR ---
vec4[0]: 1
vec4.at(1): 2
vec4.front(): 1
vec4.back(): 6
vec4.data(): 0x560ff0703360
Size: 6
Capacity: 10
Max size: 2305843009213693951
Empty: 0
After reserve(20), capacity: 20
After resize(10, 99), size: 10
After shrink_to_fit(), capacity: 10

--- DEQUE ---
Deque front: -1, back: 7

--- LIST ---
List size after operations: 9

--- FORWARD_LIST ---
Forward list front: 4

--- ARRAY ---
Array[0]: 1
Array.at(1): 2
Array.front(): 1
Array.back(): 5
Array.data(): 0x7ffe8147a690
Array size: 5

=== ASSOCIATIVE CONTAINERS ===

--- MAP ---
mp["apple"]: 5
mp.at("banana"): 3
Found cherry: 8
Count of 'apple': 1
Equal range for banana spans 1 elements
Lower bound for cherry: cherry

--- SET ---
Set size: 8
Set contains 5: 1
Found 8 in set

--- MULTIMAP ---
Multimap count for 'key': 3
Multiset count for 3: 3

=== UNORDERED CONTAINERS ===

--- UNORDERED_MAP ---
Unordered map size: 3
Bucket count: 13
Load factor: 0.230769
Max load factor: 1
Bucket for 'first': 11
Bucket size for bucket 0: 0
After rehash(10), bucket count: 11

--- UNORDERED_SET ---
Unordered set contains 3: 1
Unordered set size: 7

=== CONTAINER ADAPTORS ===

--- STACK ---
Stack size: 4
Stack top: 4
After pop, top: 3
Stack empty: 0

--- QUEUE ---
Queue size: 4
Queue front: 1
Queue back: 4
After pop, front: 2

--- PRIORITY_QUEUE ---
Priority queue size: 5
Priority queue top: 5
After pop, top: 4
Min priority queue top: 1

=== ITERATORS ===

--- Iterator Types ---
First element: 1
Last element (reverse): 5
Element at begin+2: 3
Distance begin to end: 5
After advance(2): 3
next(begin, 3): 4
prev(end, 2): 4

=== STL ALGORITHMS ===

--- Searching ---
Found 8 at position: 2
First element > 7: 8
Count of elements > 5: 4

--- Sorting ---
After sort: 1 2 3 4 5 6 7 8 9 
After stable_sort (descending): 9 8 7 6 5 4 3 2 1 
After partial_sort (first 3): 1 2 3 9 8 7 6 5 4 
Binary search for 5: 1
Lower bound for 5: 4
Upper bound for 5: 5

--- Transforming ---
Squared: 1 4 9 16 25 36 49 64 81 
After replace 5 with 50: 1 2 3 4 50 6 7 8 9 
After replace_if > 8 with 99: 1 2 3 4 99 6 7 8 99 

--- Copying ---
Copied first 5: 1 2 3 4 99 
Copy_if < 10: 1 2 3 4 6 7 8 

--- Removing ---
After remove 2: 1 3 4 5 
After unique: 1 2 3 4 

--- Accumulating ---
Sum: 15
Product: 120

--- Min/Max ---
Min: 1
Max: 9
MinMax: 1, 9

--- Partitioning ---
After partition (even first): 8 2 6 4 5 3 7 1 9 
Partition point: 4

--- Permutations ---
Next permutations of {1,2,3}:
1 2 3 
1 3 2 
2 1 3 
2 3 1 
3 1 2 
3 2 1 

--- Heap Operations ---
After make_heap: 9 6 4 1 5 3 2 1 
Is heap: 1
After pop_heap: 6 5 4 1 1 3 2 
After sort_heap: 1 1 2 3 4 5 6 

=== RANGE-BASED OPERATIONS ===

--- Range-based for loop ---
Elements: 1 2 3 4 5 
Doubling elements:
2 4 6 8 10 

--- std::for_each ---
After for_each (+1): 3 5 7 9 11 
Processing: 3
Processing: 5
Processing: 7
Processing: 9
Processing: 11

=== STRING OPERATIONS ===
String: Hello, World!
Size: 13
Length: 13
Capacity: 15
Empty: 0
str[0]: H
str.at(1): e
str.front(): H
str.back(): !
Modified string: Hello, Universe! How are you?
Substring (0, 5): Hello
Find 'Universe': 7
Uppercase: HELLO, UNIVERSE! HOW ARE YOU?

=== CONTAINER COMPARISONS ===
vec1 == vec2: 1
vec1 != vec3: 1
vec1 < vec3: 1
vec1 <= vec2: 1
vec3 > vec1: 1
vec2 >= vec1: 1
Lexicographical compare 'apple' vs 'banana': 1

=== DEMO COMPLETE ===
